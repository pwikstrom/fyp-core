##########################################################################################
# Gemini settings
##########################################################################################
[gemini]

# Your Gemini API Key
key = "YOUR_GEMINI_API_KEY" 

# The model to use for Gemini
model = "gemini-1.5-flash"

# The timeout for Gemini. It times out after this many seconds. Almost never happens.
timeout = 30

# The temperature controls the randomness of the model's output, with higher values
# leading to more diverse responses and lower values making outputs more focused and deterministic.
# I have set it very low to make the output more deterministic and focused.
temperature = 0.1

# The model will consider only the smallest group of words whose combined probabilities add up to 95%. 
# It focuses on the most likely words but allows some diversity by including multiple options.
# Note that top_p has reduced impact when the temperature is set very low. (like 0.1)
top_p = 0.95

# The model will only consider the top 64 most likely words when choosing the next word.
# It limits the choices to the 64 best options, ensuring a balance between quality and variety.
# Note that top_k has reduced impact when the temperature is set very low. (like 0.1)
top_k = 64

# the path to the prompt
prompt = "prompts/gemini_prompt_framing.txt" 

# the maximum number of tokens to output. This should be plenty!
max_output_tokens = 16384 

# check the quality of the LLM output in these columns and re-process the videos if the results don't meet requirements
doublecheck_these_cols = ["video_story", "text_visible_in_video", "list_of_objects_in_video"] 



##########################################################################################
# OpenAI settings
##########################################################################################
[openai]

# Your OpenAI API Key
key = "YOUR_OPENAI_API_KEY" 

# The model to use for OpenAI audio transcription
model = "whisper-1"



##########################################################################################
# some useful paths
##########################################################################################
[paths]

# Path for your metadata and analysis results (temp and backup dirs end up here as well)
main = "/ABSOLUTE/PATH/TO/YOUR/DATA/" 

# Path for activity data, - sitting in your main data folder
# Data will be saved in the three folders: zeeschuimer_raw, zeeschuimer_refined and data_donation_packages
activity_data_folder = "activity_data"

# Path to TikTok users' personal data dumps (json) - leave blank you're not working with these kinds of files
# ddp_path = "/ABSOLUTE/PATH/TO/YOUR/DATA/activity_data/data_packages" 

# Path to Zeeschuimer files (ndjson) - leave blank you're not working with these kinds of files
# zeeschuimer_raw = "/ABSOLUTE/PATH/TO/YOUR/DATA/activity_data/zeeschuimer_raw" 

# Path to processed Zeeschuimer files (pickled pandas DF). One DF for each ndjson.
# zeeschuimer_refined = "/ABSOLUTE/PATH/TO/YOUR/DATA/activity_data/zeeschuimer_refined"

# Path to your Firefox Downloads folder
firefox_downloads = "/Users/YOURUSERNAME/Downloads"



##########################################################################################
# these files are all located in the main data folder
##########################################################################################
[fn]

# All DFs in zeeschuimer_refined concatenated into one big DF - and some columns dropped.
baseline_results_fn = "baseline.csv" 

# The data donation packages, filtered for words that the user doesn't want to include, and expanded w other useful metadata
ddp_results_fn = "ddp_results.csv" 

# metadata generated by PykTok. This is the main table to keep track of all static project data
pyk_metadata_fn = "pyk_metadata.pkl" 

# items that could not be downloaded by PykTok
pyk_failed_items_fn = "pyk_failed_items.json" 

 # the LLM analysis results from Gemini
gemini_video_analysis_fn = "gemini_video_analysis.pkl"

# the audio transcriptions
audio_transcriptions_fn = "audio_transcriptions.json" 

# all static video metadata from the videos
all_static_metadata_fn = "all_static_metadata.csv" 

# metadata to drive the FYP website
website_metadata_fn = "website_metadata.csv" 



##########################################################################################
# misc settings
##########################################################################################
[misc]

# this label is added to zeeschuimer ndjson files in the zeeschuimer_raw folder
label = "no_label" 

# analyze the videos as soon as they are downloaded?
analyze_as_soon_as_videos_are_downloaded = true



##########################################################################################
# settings for the media storage
##########################################################################################
[media_storage]

# Should media be stored locally or in a GCP bucket? ['local' or 'GCP']
storage_type = "local" 

# The name of your GCP bucket for storage of video audio files
GCP_bucket = "YOUR_GCP_BUCKET_NAME" 

# The absolute path to your local storage if you prefer that to GCP
local_storage_dir= "/ABSOLUTE/PATH/TO/YOUR/DATA/media/"  # just an example!! 

# prefix/folder for videos - sitting in the top level of the media storage
video_prefix = "videos" 

# prefix/folder for audio files - sitting in the top level of the media storage
audio_prefix = "extracted_audio" 

# prefix/folder for video covers - sitting in the top level of the media storage
video_cover_prefix = "video_covers" 
